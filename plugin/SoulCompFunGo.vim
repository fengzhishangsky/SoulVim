function SoulCompFunGo(findstart, base)
    if a:findstart
        let line = getline('.')
        let start = col('.') - 1
        while start >= 0 && line[start - 1] =~ '[a-zA-Z_0-9\.]'
            let start -= 1
        endwhile
        return start
    else
        let res = []
        for k in s:golists
            if k =~ '^' . a:base
                call add(res, k)
            endif
        endfor
        return res
    endif
endfunction

let s:golists = [
\ "append",
\ "close",
\ "delete",
\ "panic",
\ "recover",
\ "complex",
\ "imag",
\ "real",
\ "make",
\ "new",
\ "bytes.Compare",
\ "bytes.Contains",
\ "bytes.Count",
\ "bytes.Equal",
\ "bytes.EqualFold",
\ "bytes.Fields",
\ "bytes.FieldsFunc",
\ "bytes.HasPrefix",
\ "bytes.HasSuffix",
\ "bytes.Index",
\ "bytes.IndexAny",
\ "bytes.IndexByte",
\ "bytes.IndexFunc",
\ "bytes.IndexRune",
\ "bytes.Join",
\ "bytes.LastIndex",
\ "bytes.LastIndexAny",
\ "bytes.LastIndexFunc",
\ "bytes.Map",
\ "bytes.Repeat",
\ "bytes.Replace",
\ "bytes.Runes",
\ "bytes.Split",
\ "bytes.SplitAfter",
\ "bytes.SplitAfterN",
\ "bytes.SplitN",
\ "bytes.Title",
\ "bytes.ToLower",
\ "bytes.ToLowerSpecial",
\ "bytes.ToTitle",
\ "bytes.ToTitleSpecial",
\ "bytes.ToUpper",
\ "bytes.ToUpperSpecial",
\ "bytes.Trim",
\ "bytes.TrimFunc",
\ "bytes.TrimLeft",
\ "bytes.TrimLeftFunc",
\ "bytes.TrimRight",
\ "bytes.TrimRightFunc",
\ "bytes.TrimSpace",
\ "heap.Init",
\ "heap.Pop",
\ "heap.Push",
\ "heap.Remove",
\ "binary.PutUvarint",
\ "binary.PutVarint",
\ "binary.Read",
\ "binary.ReadUvarint",
\ "binary.ReadVarint",
\ "binary.Size",
\ "binary.Uvarint",
\ "binary.Varint",
\ "binary.Write",
\ "json.Compact",
\ "json.HTMLEscape",
\ "json.Indent",
\ "json.Marshal",
\ "json.MarshalIndent",
\ "json.Unmarshal",
\ "flag.Bool",
\ "flag.String",
\ "flag.Parse",
\ "flag.NArg",
\ "flag.NFlag",
\ "flag.PrintDefaults",
\ "flag.Arg",
\ "flag.Args",
\ "flag.BoolVar",
\ "flag.Duration",
\ "flag.DurationVar",
\ "flag.Float64",
\ "flag.Float64Var",
\ "flag.Int",
\ "flag.Int64",
\ "flag.Int64Var",
\ "flag.IntVar",
\ "flag.Parsed",
\ "flag.Set",
\ "flag.StringVar",
\ "flag.Uint",
\ "flag.Uint64",
\ "flag.Uint64Var",
\ "flag.UintVar",
\ "flag.Var",
\ "flag.Visit",
\ "flag.VisitAll",
\ "fmt.Print",
\ "fmt.Printf",
\ "fmt.Println",
\ "fmt.Sprint",
\ "fmt.Sprintf",
\ "fmt.Sprintln",
\ "fmt.Errorf",
\ "fmt.Fprint",
\ "fmt.Fprintf",
\ "fmt.Fprintln",
\ "fmt.Fscan",
\ "fmt.Fscanf",
\ "fmt.Fscanln",
\ "fmt.Scan",
\ "fmt.Scanf",
\ "fmt.Scanln",
\ "fmt.Sscan",
\ "fmt.Sscanf",
\ "fmt.Sscanln",
\ "strings.Contains",
\ "strings.ContainsAny",
\ "strings.ContainsRune",
\ "strings.Count",
\ "strings.EqualFold",
\ "strings.Fields",
\ "strings.FieldsFunc",
\ "strings.HasPrefix",
\ "strings.HasSuffix",
\ "strings.Index",
\ "strings.IndexAny",
\ "strings.IndexFunc",
\ "strings.IndexRune",
\ "strings.Join",
\ "strings.LastIndex",
\ "strings.LastIndexAny",
\ "strings.LastIndexFunc",
\ "strings.Map",
\ "strings.Repeat",
\ "strings.Replace",
\ "strings.Split",
\ "strings.SplitAfter",
\ "strings.SplitAfterN",
\ "strings.SplitN",
\ "strings.Title",
\ "strings.ToLower",
\ "strings.ToLowerSpecial",
\ "strings.ToTitle",
\ "strings.ToTitleSpecial",
\ "strings.ToUpper",
\ "strings.ToUpperSpecial",
\ "strings.Trim",
\ "strings.TrimFunc",
\ "strings.TrimLeft",
\ "strings.TrimLeftFunc",
\ "strings.TrimRight",
\ "strings.TrimRightFunc",
\ "strings.TrimSpace",
\ "os.Chdir",
\ "os.Chmod",
\ "os.Chown",
\ "os.Chtimes",
\ "os.Clearenv",
\ "os.Environ",
\ "os.Exit",
\ "os.Expand",
\ "os.ExpandEnv",
\ "os.Getegid",
\ "os.Getenv",
\ "os.Geteuid",
\ "os.Getgid",
\ "os.Getgroups",
\ "os.Getpagesize",
\ "os.Getpid",
\ "os.Getppid",
\ "os.Getuid",
\ "os.Getwd",
\ "os.Hostname",
\ "os.IsExist",
\ "os.IsNotExist",
\ "os.IsPathSeparator",
\ "os.IsPermission",
\ "os.Lchown",
\ "os.Link",
\ "os.Mkdir",
\ "os.MkdirAll",
\ "os.NewSyscallError",
\ "os.Readlink",
\ "os.Remove",
\ "os.RemoveAll",
\ "os.Rename",
\ "os.SameFile",
\ "os.Setenv",
\ "os.Symlink",
\ "os.TempDir",
\ "os.Truncate",
\ "os.Create",
\ "os.Open",
\ "os.OpenFile",
\ "os.Pipe",
\ "os.Lstat",
\ "os.Stat",
\ "time.Now",
\ "time.Date",
\ "time.Parse",
\ "time.Unix",
\ "time.After",
\ "time.Sleep",
\ "time.Tick",
\ "time.ParseDuration",
\ "time.Since",
\ "time.FixedZone",
\ "time.LoadLocation",
\ "time.AfterFunc",
\ "time.NewTimer",
\ "print",
\ "println"
\ ]

