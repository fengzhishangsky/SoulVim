snippet $
	${1:$variable}${2:, $}${3}
snippet php
	<?php
	${1}
	?>
snippet phpl
	<?php ${1}?>
snippet phpe
	<?php ec${1}?>
snippet ec
	echo ${1:string}
snippet ec""
	echo "${1:string}"
snippet ec"
	echo "${1:string}"
snippet ec$
	echo ${1:$var}
# echo function result
snippet ecf
	echo ${1:func}(${2})
snippet inc
	include '${1:file}';${2}
snippet inc1
	include_once '${1:file}';${2}
snippet req
	require '${1:file}';${2}
snippet req1
	require_once '${1:file}';${2}

# $GLOBALS['...']
snippet $g
	$_GET['${1:variable}']${2}
snippet $gi
	(int)$_GET['${1:id}']${2}
snippet $p
	$_POST['${1:variable}']${2}
snippet $f
	$_FILES['${1:variable}']${2}
snippet $c
	$_COOKIE['${1:variable}']${2}
snippet $r
	$_REQUEST['${1:variable}']${2}
snippet $s
	$_SESSION['${1:variable}']${2}
snippet $se
	$_SERVER['${1:variable}']${2}
snippet $gl
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet $e
	$_ENV['${1:variable}']${2}

# Start Docblock
snippet /*
	/**
	 * ${1}
	 */
# Class - post doc
snippet doc_cp
	/**
	 * ${1:undocumented class}
	 * @author ${3:`g:snips_author`}
	 */${4}
# Class Variable - post doc
snippet doc_vp
	/**
	 * ${1:undocumented class variable}
	 * @var ${2:string}
	 */${3}
# Class Variable
snippet doc_v
	/**
	 * ${3:undocumented class variable}
	 * @var ${4:string}
	 */
	${1:var} $${2};${5}
# Class
snippet doc_c
	/**
	 * ${3:undocumented class}
	 * @packaged ${4:default}
	 * @author ${5:`g:snips_author`}
	 */
	${1:}class ${2:}
	{${6}
	} // END $1class $2
# Constant Definition - post doc
snippet doc_dp
	/**
	 * ${1:undocumented constant}
	 */${2}
# Constant Definition
snippet doc_d
	/**
	 * ${3:undocumented constant}
	 */
	define(${1}, ${2});${4}
# Function - post doc
snippet doc_fp
	/**
	 * ${1:undocumented function}
	 * @return @${2}
	 */
# Function signature
snippet doc_s
	/**
	 * ${4:undocumented function}
	 * @return ${5:void}
	 */
	${1}function ${2}(${3});${7}
# Function
snippet doc_f
	/**
	 * ${4:undocumented function}
	 * @return @${5}
	 */
	${1}function ${2}(${3}) {
		${7}
	}
# Header
snippet doc_h
	/**
	 * ${1}
	 * @author ${2:`g:snips_author`}
	 * @version ${3:$Id$}
	 * @copyright ${4:$2}
	 * @created `strftime('%d %B, %Y')`
	 */
	
	/**
	 * Define DocBlock
	 *//
# Interface
snippet doc_i
	/**
	 * ${2:undocumented class}
	 * @author ${4:`g:snips_author`}
	 */
	interface ${1:} {
		${5}
	}
# class ...
snippet class
	/**
	 * ${2}
	 * ${3:some describe}
	 */
	class ${1:ClassName} {
	}
snippet __co
	/**
	 * construct function
	 */
	public function __construct() {
	}
snippet __de
	/**
	 * destruct function
	 */
	public function __destruct() {
	}
# like this.
snippet .
	$this->${1}
snippet ::
	self::${1}
# 
snippet $.
	$${1:model}->${2}
# define(...)
snippet def
	define('${1}'${2});${3}
# defined(...)
snippet def?
	${1}defined('${2}')${3}
snippet wh
	while (${1:/* condition */}) {
		${2:// code...}
	}
# do ... while
snippet do
	do {
		${2:// code... }
	} while (${1:/* condition */});
snippet if
	if (${1:/* condition */}) {
		${2:// code...}
	}
snippet ife
	if (${1:/* condition */}) {
		${2:// code...}
	} else {
		${3:// code...}
	}
	${4}
snippet else
	else {
		${1:// code...}
	}
snippet elif
	elseif (${1:/* condition */}) {
		${2:// code...}
	}
# Tertiary conditional
snippet ?
	(${1:condition}) ? ${2:a} : ${3:b};${4}
# Tertiary conditional and return Value
snippet =?
	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
snippet switch
	switch ($${1:variable}) {
		case '${2:value}':
			${3:// code...}
			break;

		${5:case}
		default:
			${4:// code...}
			break;
	}
snippet case
	case '${1:value}':
		${2:// code...}
		break;${3}

	case${4}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4: // code...}
	}
snippet foreach
	foreach ($${1:variable} as $${2:key}) {
		${3:// code...}
	}
snippet try
	try{
		${1://code...}
	} catch(${2:Exception} $${3:e}) {
		//echo $$3->getMessage();
	}
snippet fun
	function ${1:name}(${2:$}) {
		${3:// code...}
	}
snippet arr
	array(
		${1:key}=>${2:val},
	);
snippet =arr
	$${1:arrayName} = array(
		${2:key}=>${3:val},
	);
snippet =>
	'${1:key}' => ${2:val}
snippet var
	var_dump(${1:variable});${2}
snippet vare
	var_dump(${1:variable}};exit;${2}

# public element
snippet pub
	/**
	 * ${1:describe here}
	 * @return @${2}
	 */
	public fun
snippet pubs
	/**
	 * ${1:describe here}
	 * @return @${2}
	 */
	public static fun
snippet pub$
	/**
	 * ${2:describe here}
	 * @var @${3}
	 */
	public $${1:variable};
snippet pubs$ 
	/**
	 * ${1:describe here}
	 * @var @${2}
	 */
	public static $${1:variable}

# protected element
snippet pro
	/**
	 * ${1:describe here}
	 * @return @${2}
	 */
	protected fun
snippet pros
	/**
	 * ${1:describe here}
	 * @return @${2}
	 */
	protected static fun
snippet pro$
	/**
	 * ${2:describe here}
	 * @var @${3}
	 */
	protected $${1:variable};
snippet pros$ 
	/**
	 * ${1:describe here}
	 * @var @${2}
	 */
	protected static $${1:variable}

# private element
snippet pri
	/**
	 * ${1:describe here}
	 * @return @${2}
	 */
	private fun
snippet pris
	/**
	 * ${1:describe here}
	 * @return @${2}
	 */
	private static fun
snippet pri$
	/**
	 * ${2:describe here}
	 * @var @${3}
	 */
	private $${1:variable};
snippet pris$ 
	/**
	 * ${1:describe here}
	 * @var @${2}
	 */
	private static $${1:variable}

# comment type
snippet @i
	int${1}
snippet @s
	string${1}
snippet @a
	array${1}
snippet @b
	bool${1}
snippet @n
	null${1}

#system function snippet
# array
snippet _af
	array_flip(${1:arr})${2}
snippet _am
	array_merge(${1:arr1}, ${2:arr2}${3:, $arr3})${4}
snippet _as
	array_search(${1:find}, ${2:array, trueType})${3}
snippet _asl
	array_slice(${1:array}, ${2:offset}${3:, lenth, keepkey})${4}
snippet _au
	array_unique(${1:arr})${2}
snippet _ake
	array_key_exists('${1:key}', $${2:array})${3}
# string
snippet _sl
	strlen(${1:str})${2}
snippet _sp
	strpos(${1:str}, ${2:find})${3}
snippet _sr
	str_replace(${1:find}, ${2:to}, ${3:string})${4}
snippet _ss substr
	substr(${1:str}, ${2:start, length})${3}
snippet _ss strstr
	strstr(${1:str}, ${2:endStart})${3}
snippet _stl
	strtolower(${1:str})${2}
snippet _stt
	strtotime(${1:string})${2}
snippet _stu
	strtoupper(${1:string})${2}
# file 
snippet _fe
	file_exists(${1:filepath})${2}
snippet _fgc
	file_get_contents(${1:filename})${2}
snippet _fpc
	file_put_contents(${1:filename}, ${2:data}${3:, FILE_APPEND})${4}
# asset
snippet is
	isset(${1:var})${2}
snippet is_a
	is_array(${1:var})${2}
snippet is_f
	is_file(${1:var})${2}
snippet is_l
	is_link(${1:var})${2}
snippet is_n
	is_numeric(${1:var})${2}
snippet is_o
	is_object(${1:var})${2}
snippet is_s
	is_string(${1:var})${2}
